
Professor *construir_professor()
{
    Professor professor;
    printf("Matrícula\t> ");
    fgets(professor.matricula, 9, stdin);
    printf("CPF\t> ");
    fgets(professor.cpf, 9, stdin);
    printf("Nome\t> ");
    fgets(professor.nome, 49, stdin);
    
    return criarProfessor(professor.matricula, professor.cpf, professor.nome);
}

Turma * construir_turma()
{
    Turma turma;
    printf("Código\t> ");
    fgets(turma.codigo, 9, stdin);
    printf("Nome da disciplina\t> ");
    fgets(turma.nome_disciplina, 49, stdin);
    printf("Professor\t> ");
    fgets(turma.professor, 49, stdin);
    printf("Lista de Alunos\t> ");
    fgets(turma.lista_alunos, 49, stdin);
    printf("Média da turma\t> ");
    fgets(turma.media_turma, 49, stdin);

    return criarTurma(turma.codigo, turma.nome_disciplina, turma.professor, turma.lista_alunos, turma.media_turma);
}

void imprimir_professor(Professor *professor)
{
    printf("Matrícula: %s", professor->matricula);
    printf("Nome: %s", professor->nome);
    printf("CPF: %s", professor->cpf);
    printf("Endereço: %s", professor->endereco); 
    
}

void imprimir_turma(Turma *turma)
{
    printf("Código: %s", turma->codigo);
    printf("Nome da disciplina: %s", turma->nome_disciplina);
    printf("Professor: %s", turma->professor);
    printf("Lista de Alunos: %s", turma->lista_alunos);
    printf("Média da turma: %s", turma->media_turma);
}

void tratador_menu_turmas(Turma **turmas, int qtd_atual_turmas)
{
    int opcao = menu_crud_turma();
    Turma *turma = NULL;
    switch (opcao)
    {
    case 1:
        if (qtd_atual_turmas >= MAX_TURMA)
        {
            printf("Número máximo de turmas atingido\n");
        }
        else
        {
            // Passo 1: buscar posicao disponível
            int i = 0;
            for (; i < qtd_atual_turmas; i++)
            {
                if (turmas[i] != NULL)
                {
                    // significa que esta posição está livre para uso
                    break;
                }
            }
            Turma *turma = construir_turma();
            turmas[i] = turma;
            qtd_atual_turmas++;
        }
        break;
    case 2:
    {
        int posicao = 0;
        turma = buscar_turma(turmas, &posicao);
        if (turma)
        {
            imprimir_turma(turma);
        }
        else
        {
            printf("Turma não encontrada!!\n");
        }
    }
    break;
    case 3:
    {
        printf("Implementar a atualização de turma\n");
    }

    break;
    case 4:
    {
        int posicao = 0;
        turma = buscar_turma(turmas, &posicao);
        if (turma)
        {
            destruirTurma(turma);
            turmas[posicao] = NULL;
            printf("Turma destruida\n");
        }
        else
        {
            printf("Turma não encontrada!!\n");
        }
    }

    default:
        printf("Retornando ao menu principal\n");
        break;
    }
}
